#!/usr/bin/env node

var app = require('../app');
var http = require('http');
var debug = require('debug')('SimpleWebRestAPI:start-server');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var env = normalizeRuntimeEnv(process.env.ENV || 'dev');
debug('Running as ' + env)
app.set('env', env);

var server = http.createServer(app);
server.on('error', onError);
server.on('listening', onListening);
server.listen(port);

function normalizeRuntimeEnv(val) {
  var lc = val.toLowerCase();
  if (lc === 'production' || lc === 'prod')
    return 'prod';
  if (lc === 'test' || lc === 'unittest')
    return 'test';
  if (lc === 'development' || lc === 'dev' || lc === 'local')
    return 'dev';
  throw 'Invalid runtime environment:' + val;
}

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}